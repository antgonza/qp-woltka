#!/usr/bin/env python

# -----------------------------------------------------------------------------
# Copyright (c) 2020--, The Qiita Development Team.
#
# Distributed under the terms of the BSD 3-clause License.
#
# The full license is in the file LICENSE, distributed with this software.
# -----------------------------------------------------------------------------
import click
from subprocess import run, PIPE
from os.path import dirname
import pandas as pd

from qp_woltka import plugin
from qp_woltka.woltka import woltka_to_array
from qp_woltka.util import client_connect


@click.command()
@click.argument('url', required=True)
@click.argument('job_id', required=True)
@click.argument('out_dir', required=True)
def execute(url, job_id, out_dir):
    """Executes the task given by job_id and puts the output in output_dir"""
    # there are basically 2 different kinds of jobs: register (commands)
    # and everything else
    if 'register' in job_id:
        plugin(url, job_id, out_dir)
    else:
        qclient = client_connect(url)
        job_info = qclient.get_job_info(job_id)
        parameters = job_info['parameters']

        qclient.update_job_step(
            job_id, "Step 1 of 4: Collecting info and generating submission")
        artifact_id = parameters['input']
        del parameters['input']

        files, prep = qclient.artifact_and_preparation_files(artifact_id)
        # get sample-info-files
        # Note: qclient.artifact_and_preparation_files actually uses the next
        #       two lines to retrieve the info; thus, we are doing the same
        #       operation twice but I don't think is an issue at the moment
        artifact_info = qclient.get("/qiita_db/artifacts/%s/" % artifact_id)
        response = qclient.get('/qiita_db/prep_template/%s/' %
                               artifact_info['prep_information'][0])
        sample_info = pd.read_csv(response['sample-file'], sep='\t',
                                  dtype='str', na_values=[],
                                  keep_default_na=False)
        print(sample_info)

        directory = {dirname(ffs['filepath']) for _, fs in files.items()
                     for ffs in fs if ffs is not None}
        if len(directory) != 1:
            msg = ('There is more than one input directory [%s]; please '
                   'contact qiita.help@gmail.com' % str(directory))
            return False, None, msg
        else:
            directory = directory.pop()

        # Getting all the files from the database
        main_fp, merge_fp = woltka_to_array(
            files, out_dir, parameters['Database'], prep, url, job_id)

        # Submitting jobs and returning id
        main_job = run(['sbatch', main_fp], stdout=PIPE)
        main_job_id = main_job.stdout.decode('utf8').split()[-1]
        merge_job = run(['sbatch', '-d', f'afterany:{main_job_id}',
                         merge_fp], stdout=PIPE)
        merge_job_id = merge_job.stdout.decode('utf8').split()[-1]
        print(f'{main_job_id}, {merge_job_id}')

        qclient.update_job_step(
            job_id, "Step 2 of 4: Aligning sequences")


if __name__ == '__main__':
    execute()
