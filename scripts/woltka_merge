#!/usr/bin/env python

import os
import biom
import glob as glob_
import h5py
import click
from qp_woltka.util import merge_ranges, coverage_percentage


@click.command()
@click.option('--base', type=click.Path(exists=True), required=True)
@click.option('--glob', type=str, required=True)
@click.option('--name', type=str, required=True)
@click.option('--rename/--no-rename', type=bool, default=False)
def merge(base, glob, name, rename):
    # this is the size that was used in the tests that kept a small ~2.5G
    # memory footprint
    chunk_size = 30
    full = None

    search = os.path.join(base, glob)
    tables = glob_.glob(search)
    for block in range(0, len(tables), chunk_size):
        chunk = tables[block:block + chunk_size]

        loaded = []
        for c in chunk:
            skip = True
            if biom.util.is_hdf5_file(c):
                skip = False
            else:
                with open(c) as fh:
                    for i, l in enumerate(fh):
                        if i >= 1 and l:
                            skip = False
                            break
            if not skip:
                temp = biom.load_table(c)
                if temp.shape != (0, 0):
                    loaded.append(temp)

        if full is None:
            if len(loaded) == 1:
                full = loaded[0]
            else:
                full = loaded[0].concat(loaded[1:])
        else:
            full = full.concat(loaded)

    with h5py.File(f'{base}/{name}.biom', 'w') as out:
        full.to_hdf5(out, 'fast-merge')

    if name == 'free':
        coverages = glob_.glob('coverages/*.cov')
        artifact_cov = f'{base}/artifact.cov'
        with open(artifact_cov, 'w') as out:
            out.write('\n'.join(merge_ranges(coverages)))

        with open(f'{base}/coverage_percentage.txt', 'w') as out:
            out.write('\n'.join(coverage_percentage([artifact_cov])))


if __name__ == '__main__':
    merge()
