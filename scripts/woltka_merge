#!/usr/bin/env python

import os
# import biom
# import glob as glob_
# import h5py
import click
import pandas as pd

from qiita_client.util import system_call
from qp_woltka.util import (
    # merge_ranges, coverage_percentage,
    search_by_filename)


@click.command()
@click.option('--base', type=click.Path(exists=True), required=True)
@click.option('--length_map', type=click.Path(exists=True), required=False)
def merge(base, length_map):
    aln_fp = f'{base}/alignments'
    cmd = (f'mxdx consolidate-partials --output-base {aln_fp} '
           '--extension sam.xz')
    stdout, stderr, return_value = system_call(cmd)
    if return_value != 0 or stderr:
        raise ValueError('`mxdx consolidate-partials` failed '
                         f'{return_value}: {stderr}')

    prep = pd.read_csv(f'{base}/prep_info.tsv', dtype=str, sep='\t')
    lookup = prep.set_index('run_prefix')['sample_name'].to_dict()
    ignore_fp = f'{base}/ignore'
    os.mkdir(ignore_fp)
    for fname in os.listdir(aln_fp):
        if fname.startswith('dx-partial.'):
            os.rename(f'{aln_fp}/{fname}', f'{ignore_fp}/{fname}')
            continue
        nfname = search_by_filename(fname, lookup)
        os.rename(f'{aln_fp}/{fname}', f'{aln_fp}/{nfname}.sam.xz')

    # if name == 'free' and length_map is not None:
    #     coverages = glob_.glob('coverages/*.cov')
    #     artifact_cov = f'{base}/artifact.cov'
    #     with open(artifact_cov, 'w') as out:
    #         out.write('\n'.join(merge_ranges(coverages)))
    #
    #     with open(f'{base}/coverage_percentage.txt', 'w') as out:
    #         out.write('\n'.join(
    #             coverage_percentage([artifact_cov], length_map)))


if __name__ == '__main__':
    merge()
